// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_flags.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tile_flags.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* tile_flags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tile_flags_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tile_5fflags_2eproto() {
  protobuf_AddDesc_tile_5fflags_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tile_flags.proto");
  GOOGLE_CHECK(file != NULL);
  tile_flags_descriptor_ = file->message_type(0);
  static const int tile_flags_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_flags, num_tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_flags, tile_frame_important_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_flags, tile_solid_),
  };
  tile_flags_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tile_flags_descriptor_,
      tile_flags::default_instance_,
      tile_flags_offsets_,
      -1,
      -1,
      -1,
      sizeof(tile_flags),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_flags, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tile_flags, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tile_5fflags_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tile_flags_descriptor_, &tile_flags::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tile_5fflags_2eproto() {
  delete tile_flags::default_instance_;
  delete tile_flags_reflection_;
}

void protobuf_AddDesc_tile_5fflags_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tile_flags.proto\"Y\n\ntile_flags\022\021\n\tnum_"
    "tiles\030\001 \001(\005\022 \n\024tile_frame_important\030\002 \003("
    "\010B\002\020\001\022\026\n\ntile_solid\030\003 \003(\010B\002\020\001b\006proto3", 117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tile_flags.proto", &protobuf_RegisterTypes);
  tile_flags::default_instance_ = new tile_flags();
  tile_flags::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tile_5fflags_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tile_5fflags_2eproto {
  StaticDescriptorInitializer_tile_5fflags_2eproto() {
    protobuf_AddDesc_tile_5fflags_2eproto();
  }
} static_descriptor_initializer_tile_5fflags_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tile_flags::kNumTilesFieldNumber;
const int tile_flags::kTileFrameImportantFieldNumber;
const int tile_flags::kTileSolidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tile_flags::tile_flags()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tile_flags)
}

void tile_flags::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tile_flags::tile_flags(const tile_flags& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tile_flags)
}

void tile_flags::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_tiles_ = 0;
}

tile_flags::~tile_flags() {
  // @@protoc_insertion_point(destructor:tile_flags)
  SharedDtor();
}

void tile_flags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tile_flags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tile_flags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tile_flags_descriptor_;
}

const tile_flags& tile_flags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tile_5fflags_2eproto();
  return *default_instance_;
}

tile_flags* tile_flags::default_instance_ = NULL;

tile_flags* tile_flags::New(::google::protobuf::Arena* arena) const {
  tile_flags* n = new tile_flags;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tile_flags::Clear() {
// @@protoc_insertion_point(message_clear_start:tile_flags)
  num_tiles_ = 0;
  tile_frame_important_.Clear();
  tile_solid_.Clear();
}

bool tile_flags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tile_flags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_tiles = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tiles_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tile_frame_important;
        break;
      }

      // repeated bool tile_frame_important = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_tile_frame_important:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_tile_frame_important())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18, input, this->mutable_tile_frame_important())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tile_solid;
        break;
      }

      // repeated bool tile_solid = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_tile_solid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_tile_solid())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 26, input, this->mutable_tile_solid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tile_flags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tile_flags)
  return false;
#undef DO_
}

void tile_flags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tile_flags)
  // optional int32 num_tiles = 1;
  if (this->num_tiles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_tiles(), output);
  }

  // repeated bool tile_frame_important = 2 [packed = true];
  if (this->tile_frame_important_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tile_frame_important_cached_byte_size_);
  }
  for (int i = 0; i < this->tile_frame_important_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->tile_frame_important(i), output);
  }

  // repeated bool tile_solid = 3 [packed = true];
  if (this->tile_solid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tile_solid_cached_byte_size_);
  }
  for (int i = 0; i < this->tile_solid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->tile_solid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tile_flags)
}

::google::protobuf::uint8* tile_flags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tile_flags)
  // optional int32 num_tiles = 1;
  if (this->num_tiles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_tiles(), target);
  }

  // repeated bool tile_frame_important = 2 [packed = true];
  if (this->tile_frame_important_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tile_frame_important_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tile_frame_important_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->tile_frame_important(i), target);
  }

  // repeated bool tile_solid = 3 [packed = true];
  if (this->tile_solid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tile_solid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tile_solid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->tile_solid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tile_flags)
  return target;
}

int tile_flags::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tile_flags)
  int total_size = 0;

  // optional int32 num_tiles = 1;
  if (this->num_tiles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_tiles());
  }

  // repeated bool tile_frame_important = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->tile_frame_important_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tile_frame_important_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool tile_solid = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->tile_solid_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tile_solid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tile_flags::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tile_flags)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const tile_flags* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tile_flags>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tile_flags)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tile_flags)
    MergeFrom(*source);
  }
}

void tile_flags::MergeFrom(const tile_flags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tile_flags)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  tile_frame_important_.MergeFrom(from.tile_frame_important_);
  tile_solid_.MergeFrom(from.tile_solid_);
  if (from.num_tiles() != 0) {
    set_num_tiles(from.num_tiles());
  }
}

void tile_flags::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tile_flags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tile_flags::CopyFrom(const tile_flags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tile_flags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tile_flags::IsInitialized() const {

  return true;
}

void tile_flags::Swap(tile_flags* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tile_flags::InternalSwap(tile_flags* other) {
  std::swap(num_tiles_, other->num_tiles_);
  tile_frame_important_.UnsafeArenaSwap(&other->tile_frame_important_);
  tile_solid_.UnsafeArenaSwap(&other->tile_solid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tile_flags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tile_flags_descriptor_;
  metadata.reflection = tile_flags_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tile_flags

// optional int32 num_tiles = 1;
void tile_flags::clear_num_tiles() {
  num_tiles_ = 0;
}
 ::google::protobuf::int32 tile_flags::num_tiles() const {
  // @@protoc_insertion_point(field_get:tile_flags.num_tiles)
  return num_tiles_;
}
 void tile_flags::set_num_tiles(::google::protobuf::int32 value) {
  
  num_tiles_ = value;
  // @@protoc_insertion_point(field_set:tile_flags.num_tiles)
}

// repeated bool tile_frame_important = 2 [packed = true];
int tile_flags::tile_frame_important_size() const {
  return tile_frame_important_.size();
}
void tile_flags::clear_tile_frame_important() {
  tile_frame_important_.Clear();
}
 bool tile_flags::tile_frame_important(int index) const {
  // @@protoc_insertion_point(field_get:tile_flags.tile_frame_important)
  return tile_frame_important_.Get(index);
}
 void tile_flags::set_tile_frame_important(int index, bool value) {
  tile_frame_important_.Set(index, value);
  // @@protoc_insertion_point(field_set:tile_flags.tile_frame_important)
}
 void tile_flags::add_tile_frame_important(bool value) {
  tile_frame_important_.Add(value);
  // @@protoc_insertion_point(field_add:tile_flags.tile_frame_important)
}
 const ::google::protobuf::RepeatedField< bool >&
tile_flags::tile_frame_important() const {
  // @@protoc_insertion_point(field_list:tile_flags.tile_frame_important)
  return tile_frame_important_;
}
 ::google::protobuf::RepeatedField< bool >*
tile_flags::mutable_tile_frame_important() {
  // @@protoc_insertion_point(field_mutable_list:tile_flags.tile_frame_important)
  return &tile_frame_important_;
}

// repeated bool tile_solid = 3 [packed = true];
int tile_flags::tile_solid_size() const {
  return tile_solid_.size();
}
void tile_flags::clear_tile_solid() {
  tile_solid_.Clear();
}
 bool tile_flags::tile_solid(int index) const {
  // @@protoc_insertion_point(field_get:tile_flags.tile_solid)
  return tile_solid_.Get(index);
}
 void tile_flags::set_tile_solid(int index, bool value) {
  tile_solid_.Set(index, value);
  // @@protoc_insertion_point(field_set:tile_flags.tile_solid)
}
 void tile_flags::add_tile_solid(bool value) {
  tile_solid_.Add(value);
  // @@protoc_insertion_point(field_add:tile_flags.tile_solid)
}
 const ::google::protobuf::RepeatedField< bool >&
tile_flags::tile_solid() const {
  // @@protoc_insertion_point(field_list:tile_flags.tile_solid)
  return tile_solid_;
}
 ::google::protobuf::RepeatedField< bool >*
tile_flags::mutable_tile_solid() {
  // @@protoc_insertion_point(field_mutable_list:tile_flags.tile_solid)
  return &tile_solid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
