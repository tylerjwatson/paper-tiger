// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_flags.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from tile_flags.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class TileFlagsReflection {

  #region Descriptor
  /// <summary>File descriptor for tile_flags.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TileFlagsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChB0aWxlX2ZsYWdzLnByb3RvIlkKCnRpbGVfZmxhZ3MSEQoJbnVtX3RpbGVz",
          "GAEgASgFEiAKFHRpbGVfZnJhbWVfaW1wb3J0YW50GAIgAygIQgIQARIWCgp0",
          "aWxlX3NvbGlkGAMgAygIQgIQAWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::tile_flags), global::tile_flags.Parser, new[]{ "NumTiles", "TileFrameImportant", "TileSolid" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class tile_flags : pb::IMessage<tile_flags> {
  private static readonly pb::MessageParser<tile_flags> _parser = new pb::MessageParser<tile_flags>(() => new tile_flags());
  public static pb::MessageParser<tile_flags> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::TileFlagsReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public tile_flags() {
    OnConstruction();
  }

  partial void OnConstruction();

  public tile_flags(tile_flags other) : this() {
    numTiles_ = other.numTiles_;
    tileFrameImportant_ = other.tileFrameImportant_.Clone();
    tileSolid_ = other.tileSolid_.Clone();
  }

  public tile_flags Clone() {
    return new tile_flags(this);
  }

  /// <summary>Field number for the "num_tiles" field.</summary>
  public const int NumTilesFieldNumber = 1;
  private int numTiles_;
  public int NumTiles {
    get { return numTiles_; }
    set {
      numTiles_ = value;
    }
  }

  /// <summary>Field number for the "tile_frame_important" field.</summary>
  public const int TileFrameImportantFieldNumber = 2;
  private static readonly pb::FieldCodec<bool> _repeated_tileFrameImportant_codec
      = pb::FieldCodec.ForBool(18);
  private readonly pbc::RepeatedField<bool> tileFrameImportant_ = new pbc::RepeatedField<bool>();
  public pbc::RepeatedField<bool> TileFrameImportant {
    get { return tileFrameImportant_; }
  }

  /// <summary>Field number for the "tile_solid" field.</summary>
  public const int TileSolidFieldNumber = 3;
  private static readonly pb::FieldCodec<bool> _repeated_tileSolid_codec
      = pb::FieldCodec.ForBool(26);
  private readonly pbc::RepeatedField<bool> tileSolid_ = new pbc::RepeatedField<bool>();
  public pbc::RepeatedField<bool> TileSolid {
    get { return tileSolid_; }
  }

  public override bool Equals(object other) {
    return Equals(other as tile_flags);
  }

  public bool Equals(tile_flags other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NumTiles != other.NumTiles) return false;
    if(!tileFrameImportant_.Equals(other.tileFrameImportant_)) return false;
    if(!tileSolid_.Equals(other.tileSolid_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (NumTiles != 0) hash ^= NumTiles.GetHashCode();
    hash ^= tileFrameImportant_.GetHashCode();
    hash ^= tileSolid_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (NumTiles != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NumTiles);
    }
    tileFrameImportant_.WriteTo(output, _repeated_tileFrameImportant_codec);
    tileSolid_.WriteTo(output, _repeated_tileSolid_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (NumTiles != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTiles);
    }
    size += tileFrameImportant_.CalculateSize(_repeated_tileFrameImportant_codec);
    size += tileSolid_.CalculateSize(_repeated_tileSolid_codec);
    return size;
  }

  public void MergeFrom(tile_flags other) {
    if (other == null) {
      return;
    }
    if (other.NumTiles != 0) {
      NumTiles = other.NumTiles;
    }
    tileFrameImportant_.Add(other.tileFrameImportant_);
    tileSolid_.Add(other.tileSolid_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NumTiles = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          tileFrameImportant_.AddEntriesFrom(input, _repeated_tileFrameImportant_codec);
          break;
        }
        case 26:
        case 24: {
          tileSolid_.AddEntriesFrom(input, _repeated_tileSolid_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
